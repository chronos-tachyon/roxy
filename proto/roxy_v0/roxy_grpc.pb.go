// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package roxy_v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClient interface {
	Serve(ctx context.Context, opts ...grpc.CallOption) (Web_ServeClient, error)
	Socket(ctx context.Context, opts ...grpc.CallOption) (Web_SocketClient, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) Serve(ctx context.Context, opts ...grpc.CallOption) (Web_ServeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Web_ServiceDesc.Streams[0], "/roxy.v0.Web/Serve", opts...)
	if err != nil {
		return nil, err
	}
	x := &webServeClient{stream}
	return x, nil
}

type Web_ServeClient interface {
	Send(*WebMessage) error
	Recv() (*WebMessage, error)
	grpc.ClientStream
}

type webServeClient struct {
	grpc.ClientStream
}

func (x *webServeClient) Send(m *WebMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webServeClient) Recv() (*WebMessage, error) {
	m := new(WebMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webClient) Socket(ctx context.Context, opts ...grpc.CallOption) (Web_SocketClient, error) {
	stream, err := c.cc.NewStream(ctx, &Web_ServiceDesc.Streams[1], "/roxy.v0.Web/Socket", opts...)
	if err != nil {
		return nil, err
	}
	x := &webSocketClient{stream}
	return x, nil
}

type Web_SocketClient interface {
	Send(*WebSocketFrame) error
	Recv() (*WebSocketFrame, error)
	grpc.ClientStream
}

type webSocketClient struct {
	grpc.ClientStream
}

func (x *webSocketClient) Send(m *WebSocketFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webSocketClient) Recv() (*WebSocketFrame, error) {
	m := new(WebSocketFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebServer is the server API for Web service.
// All implementations must embed UnimplementedWebServer
// for forward compatibility
type WebServer interface {
	Serve(Web_ServeServer) error
	Socket(Web_SocketServer) error
	mustEmbedUnimplementedWebServer()
}

// UnimplementedWebServer must be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (UnimplementedWebServer) Serve(Web_ServeServer) error {
	return status.Errorf(codes.Unimplemented, "method Serve not implemented")
}
func (UnimplementedWebServer) Socket(Web_SocketServer) error {
	return status.Errorf(codes.Unimplemented, "method Socket not implemented")
}
func (UnimplementedWebServer) mustEmbedUnimplementedWebServer() {}

// UnsafeWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServer will
// result in compilation errors.
type UnsafeWebServer interface {
	mustEmbedUnimplementedWebServer()
}

func RegisterWebServer(s grpc.ServiceRegistrar, srv WebServer) {
	s.RegisterService(&Web_ServiceDesc, srv)
}

func _Web_Serve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServer).Serve(&webServeServer{stream})
}

type Web_ServeServer interface {
	Send(*WebMessage) error
	Recv() (*WebMessage, error)
	grpc.ServerStream
}

type webServeServer struct {
	grpc.ServerStream
}

func (x *webServeServer) Send(m *WebMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webServeServer) Recv() (*WebMessage, error) {
	m := new(WebMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Web_Socket_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServer).Socket(&webSocketServer{stream})
}

type Web_SocketServer interface {
	Send(*WebSocketFrame) error
	Recv() (*WebSocketFrame, error)
	grpc.ServerStream
}

type webSocketServer struct {
	grpc.ServerStream
}

func (x *webSocketServer) Send(m *WebSocketFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webSocketServer) Recv() (*WebSocketFrame, error) {
	m := new(WebSocketFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Web_ServiceDesc is the grpc.ServiceDesc for Web service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roxy.v0.Web",
	HandlerType: (*WebServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Serve",
			Handler:       _Web_Serve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Socket",
			Handler:       _Web_Socket_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "roxy.proto",
}

// AirTrafficControlClient is the client API for AirTrafficControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirTrafficControlClient interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	LookupClients(ctx context.Context, in *LookupClientsRequest, opts ...grpc.CallOption) (*LookupClientsResponse, error)
	LookupServers(ctx context.Context, in *LookupServersRequest, opts ...grpc.CallOption) (*LookupServersResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	ServerAnnounce(ctx context.Context, opts ...grpc.CallOption) (AirTrafficControl_ServerAnnounceClient, error)
	ClientAssign(ctx context.Context, opts ...grpc.CallOption) (AirTrafficControl_ClientAssignClient, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type airTrafficControlClient struct {
	cc grpc.ClientConnInterface
}

func NewAirTrafficControlClient(cc grpc.ClientConnInterface) AirTrafficControlClient {
	return &airTrafficControlClient{cc}
}

func (c *airTrafficControlClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.AirTrafficControl/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTrafficControlClient) LookupClients(ctx context.Context, in *LookupClientsRequest, opts ...grpc.CallOption) (*LookupClientsResponse, error) {
	out := new(LookupClientsResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.AirTrafficControl/LookupClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTrafficControlClient) LookupServers(ctx context.Context, in *LookupServersRequest, opts ...grpc.CallOption) (*LookupServersResponse, error) {
	out := new(LookupServersResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.AirTrafficControl/LookupServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTrafficControlClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.AirTrafficControl/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTrafficControlClient) ServerAnnounce(ctx context.Context, opts ...grpc.CallOption) (AirTrafficControl_ServerAnnounceClient, error) {
	stream, err := c.cc.NewStream(ctx, &AirTrafficControl_ServiceDesc.Streams[0], "/roxy.v0.AirTrafficControl/ServerAnnounce", opts...)
	if err != nil {
		return nil, err
	}
	x := &airTrafficControlServerAnnounceClient{stream}
	return x, nil
}

type AirTrafficControl_ServerAnnounceClient interface {
	Send(*ServerAnnounceRequest) error
	Recv() (*ServerAnnounceResponse, error)
	grpc.ClientStream
}

type airTrafficControlServerAnnounceClient struct {
	grpc.ClientStream
}

func (x *airTrafficControlServerAnnounceClient) Send(m *ServerAnnounceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *airTrafficControlServerAnnounceClient) Recv() (*ServerAnnounceResponse, error) {
	m := new(ServerAnnounceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *airTrafficControlClient) ClientAssign(ctx context.Context, opts ...grpc.CallOption) (AirTrafficControl_ClientAssignClient, error) {
	stream, err := c.cc.NewStream(ctx, &AirTrafficControl_ServiceDesc.Streams[1], "/roxy.v0.AirTrafficControl/ClientAssign", opts...)
	if err != nil {
		return nil, err
	}
	x := &airTrafficControlClientAssignClient{stream}
	return x, nil
}

type AirTrafficControl_ClientAssignClient interface {
	Send(*ClientAssignRequest) error
	Recv() (*ClientAssignResponse, error)
	grpc.ClientStream
}

type airTrafficControlClientAssignClient struct {
	grpc.ClientStream
}

func (x *airTrafficControlClientAssignClient) Send(m *ClientAssignRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *airTrafficControlClientAssignClient) Recv() (*ClientAssignResponse, error) {
	m := new(ClientAssignResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *airTrafficControlClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.AirTrafficControl/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirTrafficControlServer is the server API for AirTrafficControl service.
// All implementations must embed UnimplementedAirTrafficControlServer
// for forward compatibility
type AirTrafficControlServer interface {
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	LookupClients(context.Context, *LookupClientsRequest) (*LookupClientsResponse, error)
	LookupServers(context.Context, *LookupServersRequest) (*LookupServersResponse, error)
	Find(context.Context, *FindRequest) (*FindResponse, error)
	ServerAnnounce(AirTrafficControl_ServerAnnounceServer) error
	ClientAssign(AirTrafficControl_ClientAssignServer) error
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	mustEmbedUnimplementedAirTrafficControlServer()
}

// UnimplementedAirTrafficControlServer must be embedded to have forward compatible implementations.
type UnimplementedAirTrafficControlServer struct {
}

func (UnimplementedAirTrafficControlServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedAirTrafficControlServer) LookupClients(context.Context, *LookupClientsRequest) (*LookupClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupClients not implemented")
}
func (UnimplementedAirTrafficControlServer) LookupServers(context.Context, *LookupServersRequest) (*LookupServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupServers not implemented")
}
func (UnimplementedAirTrafficControlServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedAirTrafficControlServer) ServerAnnounce(AirTrafficControl_ServerAnnounceServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerAnnounce not implemented")
}
func (UnimplementedAirTrafficControlServer) ClientAssign(AirTrafficControl_ClientAssignServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientAssign not implemented")
}
func (UnimplementedAirTrafficControlServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedAirTrafficControlServer) mustEmbedUnimplementedAirTrafficControlServer() {}

// UnsafeAirTrafficControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirTrafficControlServer will
// result in compilation errors.
type UnsafeAirTrafficControlServer interface {
	mustEmbedUnimplementedAirTrafficControlServer()
}

func RegisterAirTrafficControlServer(s grpc.ServiceRegistrar, srv AirTrafficControlServer) {
	s.RegisterService(&AirTrafficControl_ServiceDesc, srv)
}

func _AirTrafficControl_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTrafficControlServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.AirTrafficControl/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTrafficControlServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTrafficControl_LookupClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTrafficControlServer).LookupClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.AirTrafficControl/LookupClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTrafficControlServer).LookupClients(ctx, req.(*LookupClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTrafficControl_LookupServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTrafficControlServer).LookupServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.AirTrafficControl/LookupServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTrafficControlServer).LookupServers(ctx, req.(*LookupServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTrafficControl_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTrafficControlServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.AirTrafficControl/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTrafficControlServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTrafficControl_ServerAnnounce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AirTrafficControlServer).ServerAnnounce(&airTrafficControlServerAnnounceServer{stream})
}

type AirTrafficControl_ServerAnnounceServer interface {
	Send(*ServerAnnounceResponse) error
	Recv() (*ServerAnnounceRequest, error)
	grpc.ServerStream
}

type airTrafficControlServerAnnounceServer struct {
	grpc.ServerStream
}

func (x *airTrafficControlServerAnnounceServer) Send(m *ServerAnnounceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *airTrafficControlServerAnnounceServer) Recv() (*ServerAnnounceRequest, error) {
	m := new(ServerAnnounceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AirTrafficControl_ClientAssign_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AirTrafficControlServer).ClientAssign(&airTrafficControlClientAssignServer{stream})
}

type AirTrafficControl_ClientAssignServer interface {
	Send(*ClientAssignResponse) error
	Recv() (*ClientAssignRequest, error)
	grpc.ServerStream
}

type airTrafficControlClientAssignServer struct {
	grpc.ServerStream
}

func (x *airTrafficControlClientAssignServer) Send(m *ClientAssignResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *airTrafficControlClientAssignServer) Recv() (*ClientAssignRequest, error) {
	m := new(ClientAssignRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AirTrafficControl_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTrafficControlServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.AirTrafficControl/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTrafficControlServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirTrafficControl_ServiceDesc is the grpc.ServiceDesc for AirTrafficControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirTrafficControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roxy.v0.AirTrafficControl",
	HandlerType: (*AirTrafficControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _AirTrafficControl_Lookup_Handler,
		},
		{
			MethodName: "LookupClients",
			Handler:    _AirTrafficControl_LookupClients_Handler,
		},
		{
			MethodName: "LookupServers",
			Handler:    _AirTrafficControl_LookupServers_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _AirTrafficControl_Find_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _AirTrafficControl_Transfer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerAnnounce",
			Handler:       _AirTrafficControl_ServerAnnounce_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientAssign",
			Handler:       _AirTrafficControl_ClientAssign_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "roxy.proto",
}

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadResponse, error)
	Flip(ctx context.Context, in *FlipRequest, opts ...grpc.CallOption) (*FlipResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	SetHealth(ctx context.Context, in *SetHealthRequest, opts ...grpc.CallOption) (*SetHealthResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.Admin/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadResponse, error) {
	out := new(ReloadResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.Admin/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Flip(ctx context.Context, in *FlipRequest, opts ...grpc.CallOption) (*FlipResponse, error) {
	out := new(FlipResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.Admin/Flip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.Admin/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.Admin/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetHealth(ctx context.Context, in *SetHealthRequest, opts ...grpc.CallOption) (*SetHealthResponse, error) {
	out := new(SetHealthResponse)
	err := c.cc.Invoke(ctx, "/roxy.v0.Admin/SetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Reload(context.Context, *ReloadRequest) (*ReloadResponse, error)
	Flip(context.Context, *FlipRequest) (*FlipResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	SetHealth(context.Context, *SetHealthRequest) (*SetHealthResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminServer) Reload(context.Context, *ReloadRequest) (*ReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedAdminServer) Flip(context.Context, *FlipRequest) (*FlipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flip not implemented")
}
func (UnimplementedAdminServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedAdminServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedAdminServer) SetHealth(context.Context, *SetHealthRequest) (*SetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHealth not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.Admin/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.Admin/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Reload(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Flip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Flip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.Admin/Flip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Flip(ctx, req.(*FlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.Admin/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.Admin/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roxy.v0.Admin/SetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetHealth(ctx, req.(*SetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roxy.v0.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Admin_Ping_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Admin_Reload_Handler,
		},
		{
			MethodName: "Flip",
			Handler:    _Admin_Flip_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Admin_Commit_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Admin_Shutdown_Handler,
		},
		{
			MethodName: "SetHealth",
			Handler:    _Admin_SetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roxy.proto",
}
