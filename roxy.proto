syntax = "proto3";

option go_package = "github.com/chronos-tachyon/roxy/proto/roxy_v0";

package roxy.v0;

service Web {
  rpc Serve (stream WebMessage) returns (stream WebMessage) {}
}

message WebMessage {
  bytes body_chunk = 1;
  repeated KeyValue headers = 2;
  repeated KeyValue trailers = 3;
}

message KeyValue {
  string key = 1;
  string value = 2;
}

service AirTrafficControl {
  rpc Lookup (LookupRequest) returns (LookupResponse) {}
  rpc Find (FindRequest) returns (FindResponse) {}
  rpc ServerAnnounce (stream ServerAnnounceRequest) returns (stream ServerAnnounceResponse) {}
  rpc ClientAssign (stream ClientAssignRequest) returns (stream ClientAssignResponse) {}
}

message LookupRequest {
  string service_name = 1;
}

message LookupResponse {
  message Dynamic {
    uint32 current_num_servers = 1;
    uint32 current_num_clients = 2;
    double current_cps_supplied = 3;
    double current_cps_demanded = 4;
  }
  repeated string allowed_client_names = 1;
  repeated string allowed_server_names = 2;
  uint32 expected_num_clients_per_shard = 3;
  uint32 expected_num_servers_per_shard = 4;
  bool is_sharded = 5;
  uint32 num_shards = 6;
  double avg_supplied_cost_per_second_per_server = 7;
  double avg_demanded_cost_per_query = 8;
  Dynamic dynamic = 32;
}

message FindRequest {
  string service_name = 1;
  uint32 shard_id = 2;
}

message FindResponse {
  GoAway go_away = 1;
}

message ServerAnnounceRequest {
  message First {
    string service_name = 1;
    uint32 shard_id = 2;
    string location = 3;
    string unique = 4;
    string server_name = 5;
    bytes ip = 6;
    string zone = 7;
    uint32 port = 8;
    uint32 supplied_cost_per_second = 14;
    bool has_shard_id = 15;
  }
  First first = 1;
  uint64 cost_counter = 2;
  bool is_serving = 3;
}

message ServerAnnounceResponse {
  GoAway go_away = 1;
}

message ClientAssignRequest {
  message First {
    string service_name = 1;
    uint32 shard_id = 2;
    string location = 3;
    string unique = 4;
    bool has_shard_id = 15;
  }
  First first = 1;
  uint64 cost_counter = 2;
  double demanded_cost_per_second_estimate = 3;
}

message ClientAssignResponse {
  GoAway go_away = 1;
  repeated Event events = 2;
}

message GoAway {
  bytes ip = 1;
  string zone = 2;
  uint32 port = 3;
}

message Event {
  enum Type {
    UNKNOWN = 0;
    INSERT_IP = 1;
    DELETE_IP = 2;
    UPDATE_WEIGHT = 3;
    NEW_SERVICE_CONFIG = 4;
    DELETE_ALL_IPS = 5;
  }
  Type event_type = 1;
  string location = 2;
  string unique = 3;
  string server_name = 4;
  bytes ip = 5;
  string zone = 6;
  uint32 port = 7;
  float weight = 8;
  string service_config_json = 64;
}

service Admin {
  rpc Ping (PingRequest) returns (PingResponse) {}
  rpc Reload (ReloadRequest) returns (ReloadResponse) {}
  rpc Flip (FlipRequest) returns (FlipResponse) {}
  rpc Shutdown (ShutdownRequest) returns (ShutdownResponse) {}
  rpc SetHealth (SetHealthRequest) returns (SetHealthResponse) {}
}

message PingRequest {}
message PingResponse {}

message ReloadRequest {
  int64 rev = 1;
}
message ReloadResponse {
}

message FlipRequest {}
message FlipResponse {}

message ShutdownRequest {}
message ShutdownResponse {}

message SetHealthRequest {
  string subsystem_name = 1;
  bool is_healthy = 2;
}

message SetHealthResponse {
}
