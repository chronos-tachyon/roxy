syntax = "proto3";

option go_package = "github.com/chronos-tachyon/roxy/proto/roxy_v0";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

package roxy.v0;

service Web {
  rpc Serve (stream WebMessage) returns (stream WebMessage);
  rpc Socket (stream WebSocketFrame) returns (stream WebSocketFrame);
}

message WebMessage {
  bytes body_chunk = 1;
  repeated KeyValue headers = 2;
  repeated KeyValue trailers = 3;
}

message KeyValue {
  string key = 1;
  string value = 2;
}

message WebSocketFrame {
  enum Type {
    UNKNOWN = 0;
    DATA_TEXT = 1;
    DATA_BINARY = 2;
    reserved 3 to 7;
    CTRL_CLOSE = 8;
    CTRL_PING = 9;
    CTRL_PONG = 10;
    reserved 11 to 15;
  }
  Type frame_type = 1;
  bytes payload = 2;
  repeated WebSocketExtension websocket_extensions = 3;
}

message WebSocketExtension {
  string extension_type = 1;
  google.protobuf.Any extension_data = 2;
}

message WebSocketCloseError {
  uint32 code = 1;
  string text = 2;
}

service AirTrafficControl {
  rpc Lookup (LookupRequest) returns (LookupResponse);
  rpc LookupClients (LookupClientsRequest) returns (LookupClientsResponse);
  rpc LookupServers (LookupServersRequest) returns (LookupServersResponse);
  rpc Find (FindRequest) returns (FindResponse);
  rpc ServerAnnounce (stream ServerAnnounceRequest) returns (stream ServerAnnounceResponse);
  rpc ClientAssign (stream ClientAssignRequest) returns (stream ClientAssignResponse);
  rpc Transfer (TransferRequest) returns (TransferResponse);
}

message LookupRequest {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
}

message LookupResponse {
  repeated string allowed_client_names = 1;
  repeated string allowed_server_names = 2;
  uint32 expected_num_clients_per_shard = 3;
  uint32 expected_num_servers_per_shard = 4;
  bool is_sharded = 5;
  uint32 num_shards = 6;
  double avg_supplied_cost_per_second_per_server = 7;
  double avg_demanded_cost_per_query = 8;
  repeated ShardData shards = 32;
}

message LookupClientsRequest {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
  string unique_id = 4;
}

message LookupClientsResponse {
  repeated ClientData clients = 1;
}

message LookupServersRequest {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
  string unique_id = 4;
}

message LookupServersResponse {
  repeated ServerData servers = 1;
}

message FindRequest {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
}

message FindResponse {
  GoAway go_away = 1;
}

message ServerAnnounceRequest {
  ServerData first = 1;
  uint64 cost_counter = 2;
  bool is_serving = 3;
}

message ServerAnnounceResponse {
  GoAway go_away = 1;
}

message ClientAssignRequest {
  ClientData first = 1;
  uint64 cost_counter = 2;
  bool is_serving = 3;
}

message ClientAssignResponse {
  GoAway go_away = 1;
  repeated Event events = 2;
}

message TransferRequest {
  uint64 config_id = 1;
  string service_name = 2;
  uint32 shard_number = 3;
  bool has_shard_number = 4;
  repeated ClientData clients = 5;
  repeated ServerData servers = 6;
}

message TransferResponse {
}

message ShardData {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
  uint32 num_clients = 4;
  uint32 num_servers = 5;
  double declared_demand_cost_per_second = 6;
  double measured_demand_cost_per_second = 7;
  double declared_supply_cost_per_second = 8;
  double measured_supply_cost_per_second = 9;
}

message ClientData {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
  string unique_id = 4;
  string location = 5;
  double declared_cost_per_second = 10;
  double measured_cost_per_second = 11;
  bool is_alive = 12;
  bool is_serving = 13;
  repeated Sample history = 14;
}

message ServerData {
  string service_name = 1;
  uint32 shard_number = 2;
  bool has_shard_number = 3;
  string unique_id = 4;
  string location = 5;
  string server_name = 6;
  bytes ip = 7;
  string zone = 8;
  uint32 port = 9;
  double declared_cost_per_second = 10;
  double measured_cost_per_second = 11;
  bool is_alive = 12;
  bool is_serving = 13;
  repeated Sample history = 14;
}

message Sample {
  google.protobuf.Timestamp timestamp = 1;
  uint64 counter = 2;
}

message GoAway {
  bytes ip = 1;
  string zone = 2;
  uint32 port = 3;
}

message Event {
  enum Type {
    UNKNOWN = 0;
    INSERT_IP = 1;
    DELETE_IP = 2;
    UPDATE_WEIGHT = 3;
    NEW_SERVICE_CONFIG = 4;
    DELETE_ALL_IPS = 5;
  }
  Type event_type = 1;
  string unique_id = 2;
  string location = 3;
  string server_name = 4;
  bytes ip = 5;
  string zone = 6;
  uint32 port = 7;
  double assigned_cost_per_second = 8;
  string service_config_json = 64;
}

service Admin {
  rpc Ping (PingRequest) returns (PingResponse);
  rpc Reload (ReloadRequest) returns (ReloadResponse);
  rpc Flip (FlipRequest) returns (FlipResponse);
  rpc Commit (CommitRequest) returns (CommitResponse);
  rpc Shutdown (ShutdownRequest) returns (ShutdownResponse);
  rpc SetHealth (SetHealthRequest) returns (SetHealthResponse);
  rpc GetCertificate (GetCertificateRequest) returns (GetCertificateResponse);
}

message PingRequest {}
message PingResponse {}

message ReloadRequest {
  uint64 id = 1;
  int64 rev = 2;
}
message ReloadResponse {
}

message FlipRequest {
  uint64 id = 1;
}
message FlipResponse {
}

message CommitRequest {
  uint64 id = 1;
}
message CommitResponse {
}

message ShutdownRequest {}
message ShutdownResponse {}

message SetHealthRequest {
  string subsystem_name = 1;
  bool is_healthy = 2;
}
message SetHealthResponse {
}

message GetCertificateRequest {
  string certificate_name = 1;
}
message GetCertificateResponse {
  bytes certificate_body = 1;
}
